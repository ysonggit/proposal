#!/usr/bin/perl -w

# Compile LaTeX to DVI.
# This script has several advantages over the other options I've looked at:
#
# 1. It decides how many times to run LaTeX based on watching for changes in
# the log file.  For most documents (that is, those for which LaTeX's output is
# deterministic) this method should be very simple and reliable.
#
# 2. It uses batchmode parameters for LaTeX, to avoid the useless interactive
# prompts when errors occur.
#
# 3. It filters the LOG file looking for errors and warnings, so that the
# standard output generated by this script should be only messages that are
# useful for the user.
#
# 4. If the compilation fails, it removes the useless incomplete DVI.  This
# helps makefiles to work better.
#
# Revision history:
#    7/11/2011 - Initial release
#    8/05/2011 - Increased context lines on errors to 4, to ensure that line
#                number of errors is visible.
#   10/12/2011 - Added check for "Runaway argument?" warnings.
#   11/01/2011 - Added printouts of each command we execute, to blend better
#                when we're part of a makefile.


use strict;
use Getopt::Long;

use vars qw( $bibTeX );

sub getFile {
# Reads in a file and returns its contents.
# Complains if the file cannot be opened.
	my ($fname) = shift;
	my ($line, $file);
	if(!open(IN,"<$fname")) {
		print "warning: cannot open $fname; not scanning\n";
		return "";
	}

	$file = "";
	while($line = <IN>) {
		$file .= $line;
	}
	return $file;
}

sub runLaTeX {
	my $root = shift;
	my $cmd = "latex --interaction batchmode $root > /dev/null";
	print "$cmd\n";
	system($cmd);
}

sub go {
	if(!GetOptions(
				'bibtex' => \$bibTeX
				)) {
		exit(1);
	}

	if(!defined $ARGV[0]) {
		print STDERR "Usage: $0 <latex source file>\n";
	}

	# Get the root filename.
	my $root = $ARGV[0];
	$root =~ s/\.tex$//;

	# Keep count of how many times we've run LaTeX.
	my $k = 0;
	my $maxTries = 10;

	# Get a log file to start with.  LaTeX once if necessary.
	if(!-e "$root.log") {
		runLaTeX($root);
		$k++;
	}
	my $lastLog = getFile("$root.log");

	# Keep running LaTeX until the log file stops changing.
	my $log = "";
	my $bibOK = 0;
	while($k < $maxTries && $log ne $lastLog) {
		runLaTeX($root);
		$k++;

		if(!$bibOK) {
			# Look to see if there are any citations in the AUX file.  If so,
			# run BibTeX to handle them.
			my $aux = getFile("$root.aux");
			if($aux =~ "citation") {
				my $cmd = "bibtex -terse $root";
				print "$cmd\n";
				system($cmd);
			}
			$bibOK = 1;
		}


		$lastLog = $log;
		$log = getFile("$root.log");
	}

	# Show the relevant parts of the output.  At the same time, figure
	# out if LaTeX was successful.
	my $printNext = 0;
	my $retCode = 0;
	open LOG, "<$root.log";
	while(my $line = <LOG>) {
		if($line =~ /Warning/) {
			$printNext = 1;
		}

		if($line =~ /Error/) {
			$printNext = 1;
			$retCode = 1;
		}

		if($line =~ /Runaway/) {
			$printNext = 4;
			$retCode = 1;
		}

		if($line =~ /^!/) {
			$printNext = 4;
			$retCode = 1;
		}

		if($printNext > 0) {
			print $line;
			$printNext--;
		}

	}
	close LOG;

	# Let the user know if we just gave up.
	if($k >= $maxTries) {
		print STDERR "$0: Ran LaTeX $k times, but $root.log was different each time.\n";
		print STDERR "$0: Giving up.\n";
		exit(1);
	}

	# Remove the DVI if an error occured.
	if($retCode == 1) {
		unlink "$root.dvi";
	}

	# Done!
	exit($retCode);
}


go;

